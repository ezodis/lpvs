name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}

      - name: Prepare EC2, install Docker & cleanup
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << 'EOF'
            set -euo pipefail
            echo "==== üñ• Preparing EC2 instance ===="

            echo "==== üîÑ Updating packages ===="
            sudo yum update -y

            echo "==== üì¶ Installing dependencies ===="
            sudo yum install -y curl jq docker awscli --allowerasing

            echo "==== üöÄ Enabling Docker ===="
            sudo systemctl enable --now docker
            sudo usermod -aG docker ec2-user

            # Install Docker Compose plugin
            if ! docker compose version &>/dev/null; then
              echo "==== ‚öôÔ∏è Installing Docker Compose plugin ===="
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            echo "==== üßπ Cleaning Docker containers/images/volumes ===="
            set +e
            docker ps -aq | xargs -r docker stop
            docker ps -aq | xargs -r docker rm -f
            docker images -aq | xargs -r docker rmi -f
            docker volume ls -q | xargs -r docker volume rm
            docker system prune -af --volumes
            set -e

            echo "==== üìÇ Reset project folder ===="
            sudo chown -R ec2-user:ec2-user /home/ec2-user/luchandoporviviryservir || true
            rm -rf /home/ec2-user/luchandoporviviryservir
EOF

      - name: Rsync project to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "==== üì§ Syncing project to EC2 ===="
          rsync -az --delete --exclude='.git' --exclude='node_modules' ./ ec2-user@${EC2_HOST}:/home/ec2-user/luchandoporviviryservir/

      - name: Start stack on EC2 (fetch DOMAIN+EMAIL, build & up)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "==== ‚ñ∂Ô∏è Running remote Docker Compose (build + up) ===="
          ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << 'EOF'
            set -euo pipefail
            cd /home/ec2-user/luchandoporviviryservir

            echo "==== üîë Fetching DOMAIN + EMAIL from SSM ===="
            DOMAIN=$(aws ssm get-parameter --name "/lpvs/DOMAIN" --with-decryption --query "Parameter.Value" --output text)
            EMAIL=$(aws ssm get-parameter --name "/lpvs/EMAIL" --with-decryption --query "Parameter.Value" --output text)
            echo "DOMAIN: $DOMAIN"
            echo "EMAIL: $EMAIL"

            ACME_DIR="./compose/deployment/acme"
            sudo mkdir -p "$ACME_DIR"
            sudo touch "$ACME_DIR/acme.json" || true
            sudo chmod 600 "$ACME_DIR/acme.json" || true

            echo "==== üì¶ Building and starting containers ===="
            if ! docker compose version &>/dev/null; then
              echo "‚ö†Ô∏è docker compose plugin not found, using docker-compose binary"
              COMPOSE_CMD="sudo docker-compose"
            else
              COMPOSE_CMD="sudo docker compose"
            fi

            DOMAIN="$DOMAIN" EMAIL="$EMAIL" $COMPOSE_CMD -f deployment.yml up --build -d

            echo "==== ‚úÖ Containers status ===="
            $COMPOSE_CMD -f deployment.yml ps || true

            echo "==== üì¶ Top 20 Docker images ===="
            sudo docker images | head -n 20 || true

            echo "==== üê≥ Recent logs (last 200 lines per service) ===="
            for svc in traefik nginx backend db; do
              echo "---- logs: $svc ----"
              $COMPOSE_CMD -f deployment.yml logs --no-color --tail=200 "$svc" || true
            done

            echo "==== üéâ Deployment finished ===="
EOF
