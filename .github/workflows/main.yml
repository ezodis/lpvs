name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üîë Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}

      - name: üöÄ Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo -e "\n\033[1;33m==== ‚ñ∂Ô∏è Running remote docker compose (build + up) ====\033[0m"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "EC2 Host: $EC2_HOST"

          ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << 'EOF'
          set -xe
          cd /home/ec2-user/luchandoporviviryservir

          echo -e "\n\033[1;32m==== üîë Fetching secrets from SSM ====\033[0m"
          export DOMAIN=$(aws ssm get-parameter --name "/lpvs/DOMAIN" --with-decryption --query "Parameter.Value" --output text)
          export EMAIL=$(aws ssm get-parameter --name "/lpvs/EMAIL" --with-decryption --query "Parameter.Value" --output text)
          export DJANGO_SECRET_KEY=$(aws ssm get-parameter --name "/lpvs/DJANGO_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text)
          export DATABASE_URL=$(aws ssm get-parameter --name "/lpvs/DB_HOST" --with-decryption --query "Parameter.Value" --output text)
          export DB_USER=$(aws ssm get-parameter --name "/lpvs/DB_USER" --with-decryption --query "Parameter.Value" --output text)
          export DB_PASS=$(aws ssm get-parameter --name "/lpvs/DB_PASS" --with-decryption --query "Parameter.Value" --output text)
          export DB_NAME=$(aws ssm get-parameter --name "/lpvs/DB_NAME" --with-decryption --query "Parameter.Value" --output text)

          echo -e "\033[1;36mDOMAIN: $DOMAIN\033[0m"
          echo -e "\033[1;36mEMAIL:  $EMAIL\033[0m"

          echo -e "\n\033[1;34m==== üßπ Cleaning old Docker state ====\033[0m"
          sudo docker system prune -af || true
          sudo docker volume prune -f || true

          echo -e "\n\033[1;34m==== üìÇ Checking project structure ====\033[0m"
          ls -lah .
          ls -lah ./compose/deployment || true

          echo -e "\n\033[1;34m==== üìÅ Preparing ACME folder ====\033[0m"
          sudo mkdir -p ./compose/deployment/acme
          sudo touch ./compose/deployment/acme/acme.json || true
          sudo chmod 600 ./compose/deployment/acme/acme.json || true

          echo -e "\n\033[1;34m==== üèóÔ∏è Docker Build Debug (before up) ====\033[0m"
          sudo docker compose -f deployment.yml config || true
          sudo docker images || true

          echo -e "\n\033[1;34m==== üì¶ Building + Starting containers ====\033[0m"
          sudo -E docker compose -f deployment.yml up --build -d

          echo -e "\n\033[1;34m==== üêã Docker Debug (after up) ====\033[0m"
          sudo docker ps -a
          sudo docker images --digests --filter "dangling=false"
          sudo docker volume ls
          sudo docker network ls

          echo -e "\n\033[1;34m==== ‚úÖ docker compose ps ====\033[0m"
          sudo docker compose -f deployment.yml ps || true

          echo -e "\n\033[1;34m==== üê≥ Recent logs (200 lines) ====\033[0m"
          for svc in traefik nginx backend db; do
            echo -e "\n---- logs: \$svc ----"
            sudo docker compose -f deployment.yml logs --no-color --tail=200 \$svc || true
          done

          echo -e "\n\033[1;32m==== üéâ Deployment finished ====\033[0m"
          EOF
