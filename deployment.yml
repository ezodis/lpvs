# deployment.yml
# Run with: docker compose -f deployment.yml up --build
services:
  traefik:
    image: traefik:v3.5
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./compose/deployment/acme:/etc/traefik/acme
    restart: unless-stopped
    command:
      # Logging
      - "--log.level=INFO"

      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"

      # ACME (Let's Encrypt)
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"

      # Providers
      - "--providers.docker.exposedbydefault=false"

    entrypoint: >
      /bin/sh -c "mkdir -p /etc/traefik/acme &&
                  touch /etc/traefik/acme/acme.json &&
                  chmod 600 /etc/traefik/acme/acme.json &&
                  traefik"

  backend:
    build:
      context: .
      dockerfile: ./compose/deployment/Dockerfile.backend
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=(Host(`PLACEHOLDER_DOMAIN`) || Host(`www.PLACEHOLDER_DOMAIN`)) && (PathPrefix(`/api`) || PathPrefix(`/admin`) || PathPrefix(`/static`))"
      - "traefik.http.routers.backend.entrypoints=web-secure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  nginx:
    build:
      context: .
      dockerfile: ./compose/deployment/Dockerfile.nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`PLACEHOLDER_DOMAIN`) || Host(`www.PLACEHOLDER_DOMAIN`)"
      - "traefik.http.routers.frontend.entrypoints=web-secure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  db_data:
